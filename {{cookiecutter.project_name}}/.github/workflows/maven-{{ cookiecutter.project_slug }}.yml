# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: {{ cookiecutter.project_name }} Java CI with Maven

on:
  workflow_dispatch:
  push:
    branches: [ master ]
    paths:
      - "{{ cookiecutter.project_slug }}/**"


jobs:
  build:
    runs-on: ubuntu-18.04
    outputs:
      version: ${{ '{{' }} steps.gitversion.outputs.fullSemVer {{ '}}' }}

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.9
        with:
          versionSpec: '5.x'

      - name: Set up JDK 15
        uses: actions/setup-java@v1
        with:
          java-version: 15

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ '{{' }} runner.os {{ '}}' }}-m2-${{ '{{' }} hashFiles('**/pom.xml') {{ '}}' }}
          restore-keys: ${{ '{{' }} runner.os {{ '}}' }}-m2

      #- name: Release
      #  uses: qcastel/github-actions-maven/actions/release@master
      #  with:
      #    maven-local-repo-path: "{{ cookiecutter.project_slug }}/"
      #    release-branch-name: "master"
      #    git-release-bot-name: "release-bot"
      #    git-release-bot-email: "release-bot@example.com"
      #    access-token: ${{ '{{' }} secrets.GITHUB_ACCESS_TOKEN {{ '}}' }}

      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.9
        with:
          useConfigFile: true
          targetPath: {{ cookiecutter.project_slug }}/
          #additionalArguments: '/showConfig'

      - name: Build with Maven
        working-directory: {{ cookiecutter.project_slug }}

  env:
    GITHUB_TOKEN: ${{ '{{' }} secrets.GITHUB_TOKEN {{ '}}' }}

  run: |
    mkdir -p  ~/.m2
    echo "<settings><servers><server><id>github</id><username>IMGARENA</username><password>${GITHUB_TOKEN}</password></server></servers></settings>" > ~/.m2/settings.xml
    mvn -B deploy -Drevision=${{ '{{' }} steps.gitversion.outputs.fullSemVer }}

  - name: Slack Notification
    with:
      status: ${{ '{{' }} job.status {{ '}}' }}
    if: success()
    uses: ry-itto/slack_notify_actions@1.0.1
    env:
      SLACK_WEBHOOK_URL: ${{ '{{' }} secrets.SLACK_WEBHOOK_URL {{ '}}' }}
      SLACK_ICON_URL: 'https://github.githubassets.com/images/modules/logos_page/Octocat.png'
      SLACK_USERNAME: 'GitHub'
      SLACK_GITHUB_USER_PAIRS: ${{ '{{' }} secrets.SLACK_USER {{ '}}' }}
      TITLE: ':tada: Congratulations ${{ '{{' }} github.actor {{ '}}' }} :tada:'
      BODY: '@${{ '{{' }} github.actor {{ '}}' }} your recent action ${{ '{{' }} github.workflow {{ '}}' }} has been built successfully! The new version is ${{ '{{' }} steps.gitversion.outputs.fullSemVer {{ '}}' }} :partyparrot:'
      COLOR: '#4D88C2'

  docker:
    name: Create and publish Docker image
    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up JDK 15
        uses: actions/setup-java@v1
        with:
          java-version: 15

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ '{{' }} secrets.AWS_ACCESS_KEY_ID {{ '}}' }}
          aws-secret-access-key: ${{ '{{' }} secrets.AWS_SECRET_ACCESS_KEY {{ '}}' }}
          aws-region: eu-west-1
          role-to-assume: root-cicd
          role-duration-seconds: 1200

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registries: 724428741115

      - name: Set environment variables
        run: |
          echo "ecr_registry=${{ '{{' }} steps.login-ecr.outputs.registry {{ '}}' }}/imgarena/streams/{{ cookiecutter.project_slug }}" >> $GITHUB_ENV

  - name: Cache Maven packages
    uses: actions/cache@v2
    with:
      path: ~/.m2
      key: ${{ '{{' }} runner.os {{ '}}' }}-m2-${{ '{{' }} hashFiles('**/pom.xml') {{ '}}' }}
      restore-keys: ${{ '{{' }} runner.os {{ '}}' }}-m2

  - name: Restore local Docker registry from cache
    uses: actions/cache@v2
    with:
      path: /tmp/docker-registry
      key: ${{ '{{' }} runner.os {{ '}}' }}-docker-registry-${{ '{{' }} github.workflow {{ '}}' }}

  - name: Start local registry
    run: |
      docker run -d -p 5000:5000 --restart=always --name registry -v /tmp/docker-registry:/var/lib/registry registry:2 && npx wait-on tcp:5000

  - name: Build Docker image with Spring Boot Maven plugin
    working-directory: {{ cookiecutter.project_slug }}
    run: |
      mvn -B spring-boot:build-image -Drevision=${{ '{{' }} needs.build.outputs.version {{ '}}' }} -DdockerRegistry=${{ '{{' }} env.ecr_registry {{ '}}' }}

  - name: Run Trivy vulnerability scanner
    uses: aquasecurity/trivy-action@master
    with:
      image-ref: '${{ '{{' }} env.ecr_registry {{ '}}' }}/{{ cookiecutter.project_slug }}-main:${{ '{{' }} needs.build.outputs.version {{ '}}' }}'
      format: 'table'
      exit-code: '1'
      ignore-unfixed: true
      vuln-type: 'os,library'
      severity: 'CRITICAL,HIGH'

  - name: Publish Docker image
    run : |
      docker push ${{ '{{' }} env.ecr_registry {{ '}}' }}/{{ cookiecutter.project_slug }}-main:${{ '{{' }} needs.build.outputs.version {{ '}}' }}

  - name: Cache Docker image
    env:
      IMAGE_TAG: ${{ '{{' }} needs.build.outputs.version {{ '}}' }}
    if: steps.cache.outputs.cache-hit != 'true'
    run: |
      docker tag ${{ '{{' }} env.ecr_registry {{ '}}' }}/{{ cookiecutter.project_slug }}-main:$IMAGE_TAG localhost:5000/{{ cookiecutter.project_slug }}-main:$IMAGE_TAG && docker push localhost:5000/{{ cookiecutter.project_slug }}-main:$IMAGE_TAG || true
